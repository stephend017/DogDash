{"version":3,"sources":["useDogAPI.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_string_to_range","src_string","parts","split","length","min","parseInt","max","trim","DogCard","dog","image_url","Card","style","maxWidth","CardMedia","image","height","paddingTop","CardContent","Typography","gutterBottom","variant","component","name","color","temperament","App","nextDog","a","fetch","response","json","responseJson","undefined","data","console","log","weight","bred_for","breed_group","life_span","image_width","image_height","useState","setDog","Grid","container","justify","alignItems","direction","spacing","margin","item","Button","onClick","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gSAiCA,SAASA,EAAiBC,GACtB,IAAMC,EAAkBD,EAAWE,MAAM,KACzC,OAAID,EAAME,OAAS,EAAY,CAAEC,IAAKC,SAASJ,EAAM,IAAKK,IAAKD,SAASJ,EAAM,KAGvE,CAAEG,IAFiBC,SAASJ,EAAM,GAAGM,QAEnBD,IADCD,SAASJ,EAAM,GAAGM,SCHhD,SAASC,EAAT,GAAqD,IAAlCC,EAAiC,EAAjCA,IACjB,OACE,oCACGA,IAAG,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAKC,YACX,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,SAAU,MACvB,kBAACC,EAAA,EAAD,CAAWC,MAAK,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAKC,UAAWE,MAAO,CAAEI,OAAQ,EAAGC,WAAY,YAClE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7Cb,EAAIc,MAEP,kBAACJ,EAAA,EAAD,CAAYE,QAAQ,QAAQG,MAAM,gBAAgBF,UAAU,KACzDb,EAAIgB,gBASJC,MAjDf,WACE,IAAMC,EDHS,uCAAG,kCAAAC,EAAA,sEAGeC,MAAM,8CAHrB,cAGFC,EAHE,gBAIaA,EAASC,OAJtB,OAIRC,EAJQ,sBAK8BC,IAAjCD,EAAa,GAAb,OAA0B,GALvB,8BAONE,EAAOF,EAAa,GAAb,OAA0B,GACvCG,QAAQC,IAAIF,GACNzB,EAAW,CACb4B,OAAQtC,EAAiBmC,EAAI,OAAJ,UACzBlB,OAAQjB,EAAiBmC,EAAI,OAAJ,UACzBX,KAAMW,EAAI,KACVI,SAAUJ,EAAI,SACdK,YAAaL,EAAI,YACjBM,UAAWzC,EAAiBmC,EAAI,WAChCT,YAAaS,EAAI,YACjBxB,UAAWsB,EAAa,GAAb,IACXS,YAAaT,EAAa,GAAb,MACbU,aAAcV,EAAa,GAAb,QAnBN,kBAsBLvB,GAtBK,4CAAH,qDCEF,EAESkC,qBAFT,mBAENlC,EAFM,KAEDmC,EAFC,KAIb,OACE,oCAEE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAQ,SACRC,WAAW,SACXC,UAAU,SACVC,QAAS,EACTtC,MAAO,CAAEuC,OAAQ,UAEjB,kBAACN,EAAA,EAAD,CAAMO,MAAI,GAER,kBAAC5C,EAAD,CAASC,IAAKA,KAEhB,kBAACoC,EAAA,EAAD,CAAMO,MAAI,GACR,kBAACC,EAAA,EAAD,CAAQhC,QAAQ,YAAYG,MAAM,UAAU8B,QAAO,uCAAE,WAAOC,GAAP,SAAA3B,EAAA,kEAAegB,EAAf,SAA4BjB,IAA5B,6EAAF,uDAA6ClB,IAAG,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAKC,YAAa,aAAcD,KAAO,OAACA,QAAD,IAACA,OAAD,EAACA,EAAKC,aAAc,gBCbxJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.7951737a.chunk.js","sourcesContent":["import { Dog, Range } from './dog';\r\n\r\nexport function useDogAPI(): () => Promise<Dog> {\r\n    const nextDog = async () => {\r\n        let responseJson;\r\n        do {\r\n            const response = await fetch('https://api.thedogapi.com/v1/images/search');\r\n            responseJson = await response.json();\r\n        } while (responseJson[0]['breeds'][0] === undefined);\r\n\r\n        const data = responseJson[0]['breeds'][0];\r\n        console.log(data)\r\n        const dog: Dog = {\r\n            weight: _string_to_range(data['weight']['imperial']),\r\n            height: _string_to_range(data['height']['imperial']),\r\n            name: data['name'],\r\n            bred_for: data['bred_for'],\r\n            breed_group: data['breed_group'],\r\n            life_span: _string_to_range(data['life_span']),\r\n            temperament: data['temperament'],\r\n            image_url: responseJson[0]['url'],\r\n            image_width: responseJson[0]['width'],\r\n            image_height: responseJson[0]['height']\r\n        }\r\n\r\n        return dog;\r\n    }\r\n\r\n\r\n    return nextDog;\r\n}\r\n\r\n\r\nfunction _string_to_range(src_string: string): Range {\r\n    const parts: string[] = src_string.split(' ');\r\n    if (parts.length < 3) { return { min: parseInt(parts[0]), max: parseInt(parts[0]) }; }\r\n    const min_value: number = parseInt(parts[0].trim());\r\n    const max_value: number = parseInt(parts[2].trim());\r\n    return { min: min_value, max: max_value };\r\n}","import React, { useState } from 'react';\nimport { Card, CardMedia, Button, CardContent, Typography, Grid } from '@material-ui/core';\nimport { useDogAPI } from './useDogAPI';\nimport { Dog } from './dog';\n\nfunction App() {\n  const nextDog = useDogAPI();\n  const [dog, setDog] = useState<Dog>();\n\n  return (\n    <>\n\n      <Grid\n        container\n        justify='center'\n        alignItems='center'\n        direction='column'\n        spacing={2}\n        style={{ margin: '10% 0' }}\n      >\n        <Grid item>\n\n          <DogCard dog={dog} />\n        </Grid>\n        <Grid item>\n          <Button variant='contained' color='primary' onClick={async (e) => { setDog(await nextDog()) }}>{dog && dog?.image_url && \"New Dog!\"}{(!dog || !dog?.image_url) && 'Click Me'}</Button>\n\n        </Grid>\n      </Grid>\n\n    </>\n  );\n}\n\nfunction DogCard({ dog }: { dog: Dog | undefined }) {\n  return (\n    <>\n      {dog && dog?.image_url &&\n        <Card style={{ maxWidth: 350 }}>\n          <CardMedia image={dog?.image_url} style={{ height: 0, paddingTop: '56.25%' }} />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {dog.name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {dog.temperament}\n            </Typography>\n          </CardContent>\n        </Card>\n      }\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}